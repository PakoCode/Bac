S1
1.c
2.a
2
22
222
228
229
28
282
288
29
8
3.c
4.d
5.b

S2
1.
a) 2197553
b) 2012 2120
d) cat timp x > 0

2.
1 6 3 5 6 2
1 2 4 5 6 1

3.ELEMENT


S3
1.
int putere(int n){
    int d = 2, nr = 0, minn = 1000000000;
    while(n != 1){
        int p = 0;
        while(n % d == 0){
            n = n / d;
            p ++;
        }
        if(p != 0 && p < minn){
            minn = p;
            nr = d;
        }
        d++;
    }
    return nr;
}

2.
#include <iostream>

using namespace std;

int main()
{
    int a[101][101], n, k, x = 0;
    cin >> n >> k;
    for(int i = 1; i <= n; i ++){
        for(int j = 1; j <=n; j++){
            cin >> a[i][j];
        }
    }
    x = a[k][k-1] ;
     for(int i = k - 1; i >= 2; i --){
        a[k][i] = a[k][i-1];
    }
    a[k][1] = x;
  for(int i = 1; i <= n; i ++){
        for(int j = 1; j <=n; j++){
            cout << a[i][j] << " ";
        }
        cout << '\n';
    }
}

3.
Ceea ce am decis sa fac ca sa rezolv aceasta problema este sa folosesc un 
vector de frecventa, cu ajutorul caruia voi afla de cate k ori apare
un element i in sir si voi aduna la o suma s numarul 10 si produsul i*i
de k ori;
#include <iostream>

using namespace std;

int main()
{
    int x, s = 0, v[11] ={}; 
    while(cin >> x){
        v[x] ++;  
    }
    for(int i = 1; i <= 10; i++ ){
         if(v[i] != 0){
           s = s + 10 + v[i] *(i*i); 
         }
    }
    cout << s;
}
 Din punct de vedere al timpului de executare, algoritmul are o eficienta O(1), iar din punct de vedere al spatiului, algoritmul are o eficienta
O(10)