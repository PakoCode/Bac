S1
1.b
2.d
3.a
4.d
5.c

S2
1.
a) - 1
b) 7789, 7788;
d)executa cat timp n > 0

2. 149 167 239, 347;

3.
7
2020-2021
s1 = bac2021
cout << 7
s2 = 2021
s2 = 2020-
s2 = 2020-2021
cout << 2020-2021;

S3
1.
#include <iostream>

using namespace std;
void divX(int n, int x){
    while(n != 0){
        cout << x * n << " ";
        n --;
    }
}
int main() {
    int n, x;
    cin >> n >> x;
    divX(n, x);
    return 0;
}

2.
#include <iostream>
using namespace std;
int main() {
    int a[101][101], n;
    cin >> n;
    for(int i = 1; i <= n; i ++){
        for(int j = 1; j <= n; j ++){
            cin >> a[i][j];
        }
    }
    for(int i = 1; i <= n; i ++){
        cout << a[i][1] << " ";
    }
    for(int j = 2; j <= n; j ++){
        cout << a[n][j] << " ";
    }
    for(int i = n - 1; i >= 1; i --){
        cout << a[i][n] << " ";
    }
    for(int j = n - 1; j >= 2; j --){
        cout << a[1][j] << " ";
    }
    return 0;
}

3.
#include <iostream>
using namespace std;
int main() {
    int f[101] = {}, x;
    while(cin >> x){
        f[x] ++;
    }
    int k = 0;
    int a[2] = {};
    for(int i = 99; i >= 10; i --){
        if(f[i] == 0){
            if(i % 10 != i / 10){
                a[k] = i;
                k ++;
            }
        if(k == 2) break;
        }
    }
    if(k < 2) cout << "nu exista"; 
    else{
        cout << a[0] << " " << a[1];
    }
    return 0;
}
//Din punct de vedere al memoriei, algoritmul are o eficienta O(100)?
Parcurgem sirul, iar daca gasim un numar care se afla intre 0 si 100 marim valoarea din f[numar]. 
Dupa, parcurgem sirul in ordine descrescatoare, iar daca gasim un numar care indeplineste conditiile necesare
il vom memora in sirul a pe pozitia k. Daca gasim doua astfel de numere, vom iesi din for().
La final, verificam daca nu am gasit doua astfel de numere, caz in care afisam mesajul "nu exista". Altfel, vom afisa cele
doua numere;

Din punct de vedere al timpului, algoritmul este eficient, avand o eficienta O(x) - x fiind numarul de elemente din sir.
