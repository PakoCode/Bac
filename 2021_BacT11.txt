S1
1.c??? 4040%(4040/2021) = 4040%2 == 0 chiar daca 2021 nu e divizor;
2.b
{0,1,2}
0, 1, 10, 100, 1000, 1001, 1002, 101, 1010, 1011, 1012, 102, 1020, 1022, 110, 1100, 1101, 1102,
120, 1200, 1201, 1202, 1

2002, 2020, X

2020, 21
202 21

122 1221 X
21  210 X

3.a
4.c
5.d

S2
1.
a)****
2, 9
3, 9
5, 9 *
7, 9 *
9, 9 *
11,9 *
b) 1 156
1 79 
79 / 2 + 1= 40

79 + 79 = 156

79 ---- 156 = 79 numere => 79 / 2 + 1= 40 stelute 

d)repeta pana cand m > n;

2. 2, 10
f(2) = 2
f(21) = 21 - (19 - (17 - (15 - (13 - (11 - (9 - (7 - (5 - (3)
f(21) = 10

3.
x = bac2021
cout << 2021
2021
b!a!c!

S3
1.
#include <iostream>

using namespace std;
void imog(int a, int b, int &rez){
    int x = 0, y = 0, p = 1;
    while(a != 0){
        if(a % 2 != 0){
            x = a % 10 * p + x;
            p = p * 10;
        }
        a = a / 10;
    }
      while(b != 0){
        if(b % 2 != 0){
            y = b % 10 + y * 10;
        }
        b = b / 10;
    }
    cout << x <<" "<< y;
    if(x == y) rez = 1;
}
int main() {
    int a, b, rez = 0;
    cin >> a >> b;
    imog(a, b, rez);
    cout <<" "<<  rez;
    return 0;
}

2.
#include <iostream>

using namespace std;
int main() {
    int a[20][20], n, k;
    cin >> n >> k;
    for(int i = 1; i <= n; i ++){
        for(int j = 1; j <= n; j ++){
            cin >> a[i][j];
        }
    }
    for(int i = 1; i < k; i ++){
        int aux = a[k][i];
        a[k][i] = a[i][k];
        a[i][k] = aux;
    }
     for(int i = 1; i <= n; i ++){
        for(int j = 1; j <= n; j ++){
            cout << a[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}

3.
#include <iostream>

using namespace std;
int main() {
    int x, y, n;
    cin >> x >> y;
    cout << y << " " << x << " "; //afisam primele doua numere
    n = (y - x) / 2 ; // aflam numarul de elemente - 1
    n --; /scadem unu ca sa avem pozitia ultimului element afisat x
    while(n != 0){
        x = x - 2 * n; //aflam urmatorul element
        cout << x << " "; //afisam elementul respectiv
        n --; // scadem din pozitie unu;
        
    }
    return 0;
}
Vom afisa primele doua elemente pe care le primim din enuntul problemei, y si x. Dupa, aflam pozitia pe care se afla elementul y, pe care o salvam
in variabila n. Vom scadea 1 din n ca sa fie pozitia elementului curent x, iar dupa aflam urmatorul element x in functie de n;

Din punct de vedere al memoriei, algoritmul are o eficienta O(1), folosind 3 variabile simple.
Din punct de vedere al timpului de executare, programul are o eficienta O(n), n reprezentand numarul de elemente 
